import aaz.libhpsocket.ssl;

var _dll = aaz.libhpsocket._dll;

namespace aaz.libhpsocket.ssl.component.properties.client;

setupSSLContext = function(verifyMode=0, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath){
	return !!_dll.HP_SSLClient_SetupSSLContextW(owner.pSocket, verifyMode, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath);
}

setupSSLContextByMemory = function(verifyMode=0 , pemCert , pemKey, keyPassword , caPemCert){
	return _dll.HP_SSLClient_SetupSSLContextByMemoryB(owner.pSocket, verifyMode, pemCert, pemKey, keyPassword, caPemCert); 
}

cleanupSSLContext = function(){
	_dll.HP_SSLClient_CleanupSSLContext(owner.pSocket);
}

startSSLHandShake = function(){
	return _dll.HP_SSLClient_StartSSLHandShakeB(owner.pSocket);
}

getSSLSessionInfo = function(sslSessionInfo){
	var info = {ptr value}
	return _dll.HP_SSLClient_GetSSLSessionInfoB( owner.pSocket, sslSessionInfo, info ); 
}
	
isSSLAutoHandShake = {
    _get = function(){
    	return _dll.HP_SSLClient_IsSSLAutoHandShakeB( owner.pSocket ); 
    }
    
    _set = function( v ){
    	_dll.HP_SSLClient_SetSSLAutoHandShake( owner.pSocket, v );
    } 
}

sslCipherList = {
    _get = function(){
    	var p = _dll.HP_SSLClient_GetSSLCipherListP( owner.pSocket )
    	if(p){
    		return ..raw.str(p,true); 	
    	}
    }

    _set = function(v){
    	_dll.HP_SSLClient_SetSSLCipherListW(owner.pSocket, v);
    } 
}

