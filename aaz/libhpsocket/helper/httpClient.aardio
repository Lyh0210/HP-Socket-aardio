import aaz.libhpsocket.helper.websocket;
import aaz.libhpsocket.helper.client;

namespace aaz.libhpsocket.helper.httpClient;
var wsHelper = ..aaz.libhpsocket.helper.websocket;
var clientHelper = ..aaz.libhpsocket.helper.client;

var defaultSaveWsUpgradeRequestKey = function(component, key ){
	clientHelper.reallocString(component, #key);
	clientHelper.appendString(component, key,#key)
}

var defaultGetWsUpgradeRequestKey = function(component){
	var requestKey = clientHelper.getString(component); 
	clientHelper.reallocString(component, 0);
	return requestKey; 
}

getUrlHost = function(component){
	var ip, port = component.getRemoteHost();
	if(!(ip&&port) )return;
	if(ip=="0.0.0.0") ip = "localhost";
	return ..string.format("%s:%d", ip, port); 
}

getUrl = function(component, path, scheme="http"){
	var host = getUrlHost(component);
	if(!host) return;
	var url =  ..string.format("%s://%s", scheme, host ); 
	if(path){
		path = ..string.replace(path,"\\","/");
		if(path[1]!='/'#) path= "/" + path;
		return url + path;
	}
	return url;
}

sendWsUpgradeRequest = function(component, path="/", baseHeaders, saveWsUpgradeRequestKey){
	saveWsUpgradeRequestKey := defaultSaveWsUpgradeRequestKey;
	
	var host = getUrlHost();
	var origin = getUrl(path);
	var headers, requestKey = wsHelper.genHeaders(host, origin, baseHeaders);
	
	if(component.sendGet(path, headers)){
		saveWsUpgradeRequestKey(component, requestKey);
		return true; 
	}
}

checkWsUpgradeResponse = function(component, getWsUpgradeRequestKey){
	getWsUpgradeRequestKey := defaultGetWsUpgradeRequestKey;
	
	var acceptKey = component.getHeader("Sec-WebSocket-Accept");
	if(!acceptKey) return ;
	
	var requestKey = getWsUpgradeRequestKey(component);
	if( wsHelper.getSecAccept(requestKey) == acceptKey ) return true;
}